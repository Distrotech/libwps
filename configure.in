AC_INIT(src/lib/WPS8.cpp)

AM_CONFIG_HEADER(config.h)

WPS_MAJOR_VERSION=0
WPS_MINOR_VERSION=1
WPS_MICRO_VERSION=0

WPS_VERSION="$WPS_MAJOR_VERSION.$WPS_MINOR_VERSION.$WPS_MICRO_VERSION"

AC_SUBST(WPS_MAJOR_VERSION)
AC_SUBST(WPS_MINOR_VERSION)
AC_SUBST(WPS_MICRO_VERSION)
AC_SUBST(WPS_VERSION)

dnl # libtool versioning
dnl LT_RELEASE=$WPS_MAJOR_VERSION.$WPS_MINOR_VERSION
dnl AC_SUBST(LT_RELEASE)

LT_CURRENT=`expr 10 '*' $WPS_MAJOR_VERSION + $WPS_MINOR_VERSION`
LT_REVISION=$WPS_MICRO_VERSION
# For 1.0.0 comment the first line and uncomment the second
LT_AGE=0
# LT_AGE=$WPS_MINOR_VERSION
LT_CURRENT_MINUS_AGE=`expr $LT_CURRENT - $LT_AGE`
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)
AC_SUBST(LT_CURRENT_MINUS_AGE)

AM_INIT_AUTOMAKE(libwps, $WPS_VERSION)

AC_PROG_CC

AC_PROG_CXX

AC_PROG_INSTALL

AC_LIBTOOL_WIN32_DLL

AC_DISABLE_STATIC
AC_PROG_LIBTOOL

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

dnl ***********************************************************************************

PKG_CHECK_MODULES(LIBWPS,[
    libwpd-0.8
    ])

AC_CHECK_HEADERS(iconv.h, , AC_MSG_ERROR(Required header iconv.h not found.))

test_docs=true
AC_ARG_WITH(docs,
	[  --without-docs          Do not build documentation],
	if test "x$withval" = xno; then
		test_docs=false
	fi
)

if test "x$test_docs" = xtrue; then
	AC_CHECK_TOOL(DOXYGEN, doxygen, no)
	if test "$DOXYGEN" = no; then
		AC_MSG_WARN([*** Could not find doxygen in your PATH.])
		AC_MSG_WARN([*** The documentation will not be built.])
		test_docs=false
	fi
fi

AM_CONDITIONAL(WITH_LIBWPS_DOCS, $test_docs )


AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    native_win32=yes
    LIBWPS_WIN32_RESOURCE=libwps-win32res.lo
    WPS2HTML_WIN32_RESOURCE=wps2html-win32res.lo
    WPS2TEXT_WIN32_RESOURCE=wps2text-win32res.lo
    WPS2RAW_WIN32_RESOURCE=wps2raw-win32res.lo
    ;;
  *)
    native_win32=no
    LIBWPS_WIN32_RESOURCE=
    WPS2HTML_WIN32_RESOURCE=
    WPS2TEXT_WIN32_RESOURCE=
    WPS2RAW_WIN32_RESOURCE=
    ;;
esac
AC_MSG_RESULT([$native_win32])
AM_CONDITIONAL(OS_WIN32, test "$native_win32" = yes)
AC_SUBST(LIBWPS_WIN32_RESOURCE)
AC_SUBST(WPS2HTML_WIN32_RESOURCE)
AC_SUBST(WPS2TEXT_WIN32_RESOURCE)
AC_SUBST(WPS2RAW_WIN32_RESOURCE)

AC_MSG_CHECKING([for Win32 platform in general])
case "$host" in
  *-*-mingw*|*-*-cygwin*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT($platform_win32)
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = yes)

AC_MSG_CHECKING([for Darwin (Mac OS X) platform])
case "$host" in
  *-*-darwin*)
    platform_darwin=yes
    ;;
  *)
    platform_darwin=no
    ;;
esac
AC_MSG_RESULT($platform_darwin)
AM_CONDITIONAL(PLATFORM_DARWIN, test "$platform_darwin" = yes)

AC_ARG_ENABLE(debug,[  --enable-debug    Turn on debugging],[
	case "${enableval}" in
	   yes)	debug=true ;
		DEBUG_CXXFLAGS="-DDEBUG -g" ;;
	    no)	debug=false ;
		DEBUG_CXXFLAGS="-DNDEBUG" ;;
	     *)	AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
	esac
],[	debug=false
	DEBUG_CXXFLAGS="-DNDEBUG" 
])

# AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

# Courtesy of Glib: Ensure MSVC-compatible struct packing convention 
# is used when compiling for Win32 with gcc.
# What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
# gcc2 uses "-fnative-struct".
if test x"$native_win32" = xyes; then
  if test x"$GCC" = xyes; then
    msnative_struct=''
    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
    if test -z "$ac_cv_prog_CC"; then
      our_gcc="$CC"
    else
      our_gcc="$ac_cv_prog_CC"
    fi
    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
      2.)
	if $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then
	  msnative_struct='-fnative-struct'
	fi
	;;
      *)
	if $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then
	  msnative_struct='-mms-bitfields'
	fi
	;;
    esac
    if test x"$msnative_struct" = x ; then
      AC_MSG_RESULT([no way])
      AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])
    else
      CFLAGS="$CFLAGS $msnative_struct"
      CXXFLAGS="$CXXFLAGS $msnative_struct"
      AC_MSG_RESULT([${msnative_struct}])
    fi
  fi
fi 

LIBWPS_CXXFLAGS="$LIBWPS_CFLAGS"

AC_SUBST(LIBWPS_CXXFLAGS)
AC_SUBST(DEBUG_CXXFLAGS)
AC_SUBST(LIBWPS_LIBS)

AC_OUTPUT([
Makefile
src/Makefile
src/conv/Makefile
src/conv/html/Makefile
src/conv/html/wps2html.rc
src/conv/raw/Makefile
src/conv/raw/wps2raw.rc
src/conv/text/Makefile
src/conv/text/wps2text.rc
src/lib/Makefile
src/lib/libwps.rc
src/test/Makefile
docs/Makefile
docs/doxygen/Makefile
build/Makefile
build/win32/Makefile
libwps-0.8.pc
libwps.spec
libwps-zip
autopackage/Makefile
autopackage/default.apspec
])

case "$debug" in
     "true" )
        AC_MSG_RESULT([Configured with debugging symbols.]) ;;
esac
